version: "2.0"
# this is a annotation
metadata:
  name: resource
spec:
  resources:
    requests:
      cpu: 6000m
      memory: 38Gi
  basic:
    commonLabels:
      choerodon-version: "2.0"
    # ImageRepository: "registry.cn-shanghai.aliyuncs.com/c7n/"
    chartRepository: "https://openchart.choerodon.com.cn/choerodon/c7n/"
    datasourceTpl: "jdbc:mysql://%s:3306/%s?useUnicode=true&characterEncoding=utf-8&useSSL=false&useInformationSchema=true&remarks=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai"
    # prefix: ""
    # helmValues: "values"
    # thinMode: false
    # skipInput: false
    # timeout: 0
    slaver:
      version: 0.1.0
      name: c7n-slaver
      image: registry.cn-shanghai.aliyuncs.com/c7n/c7n-slaver:0.1.1
      ports:
      - containerPort: 9000
        name: http
        protocol: TCP
      - containerPort: '9001'
        name: grpc
        protocol: TCP
      volumeMounts:
      - name: data
        mountPath: /data
      dataPath: /data
  application:
    c7n:
      - middleware
      - devops-middleware
      - c7n-framework
      - c7n-devops
      - c7n-front
    framework:
      - middleware
      - c7n-framework
    devops:
      - middleware
      - devops-middleware
      - c7n-framework
      - c7n-devops
      - c7n-front
  release:
    middleware:
      - name: c7n-mysql
        chart: mysql
        version: 0.1.4
        resource:
          port: 3306
          # mysql 的 svc name 就是 release name
          host: '{{ .GetReleaseName "c7n-mysql" }}'
          password: '{{ .GetReleaseValue "c7n-mysql" "env.MYSQL_ROOT_PASSWORD"}}'
          username: root
        values:
          - name: "env.MYSQL_ROOT_PASSWORD"
            value: "admin"
            input:
              enabled: true
              regex: ".+"
              password: true
              tip: "请输入您要设置的mysql密码(不能为纯数字):"
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
      - name: c7n-redis
        chart: redis
        version: 0.2.5
        resource:
          host: '{{ .GetReleaseName "c7n-redis" }}'
          port: 6379
        values:
      - name: minio
        chart: minio
        version: 5.0.5
        resource:
          host: minio
          port: 9000
          schema: http
        values:
          - name: "ingress.hosts[0]"
            value: '{{ ( .GetResource "minio" ).Domain }}'
            check: clusterdomain
          - name: "accessKey"
            value: "admin"
            input:
              enabled: true
              regex: ".{3,}"
              tip: "请设置的minio的ACCESS_KEY(3个字符以上,不能为纯数字):"
              password: false
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
          - name: "secretKey"
            value: "choerodon"
            input:
              enabled: true
              password: true
              regex: ".{8,40}"
              tip: "请设置的minio的SECRET_KEY(8-40字符,不能为纯数字):"
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
    devops-middleware:
      - name: gitlab
        chart: gitlab-ha
        version: 0.4.8
        # 首先读取 用户配置文件，如果用户配置文件中没有则让用户输入
        resource:
          schema: http
          # 如下是自引用的 postgres 配置
          host: '{{ .GetReleaseName "gitlab" }}-gitlab-database'
          port: 5432
          username: "gitlab"
          password: '{{ .GetReleaseValue "gitlab" "database.internal.password"}}'
        values:
          - name: "core.env.GITLAB_SECRETS_DB_KEY_BASE"
            value: '{{ generateAlphaNum 64 }}'
          - name: "core.env.GITLAB_SECRETS_SECRET_KEY_BASE"
            value: '{{ generateAlphaNum 64 }}'
          - name: "core.env.GITLAB_SECRETS_OTP_KEY_BASE"
            value: '{{ generateAlphaNum 64 }}'
          - name: "expose.ingress.host"
            value: '{{ ( .GetResource "gitlab").Domain }}'
            check: clusterdomain
          - name: "database.internal.password"
            value: '{{ generateAlphaNum 10 }}'
          - name: "redis.internal.password"
            value: '{{ generateAlphaNum 10 }}'
      # resource harbor
      - name: harbor
        chart: harbor
        version: 1.5.5
        resource:
          host: harbor
          port: 5000
          schema: https
        values:
          - name: "harborAdminPassword"
            value: "Choerodon123"
            input:
              enabled: true
              password: true
              regex: ".{8,}"
              tip: "请设置的Harbor管理员密码(8位以上、必须包含大小写及数字):"
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
              include:
                - value: "[A-Z]+"
                  name: "必须包含大写"
                - value: "[a-z]+"
                  name: "必须包含小写"
                - value: "\\d+"
                  name: "必须包含数字"
          - name: "expose.ingress.hosts.core"
            value: '{{ ( .GetResource "harbor" ).Domain }}'
            check: clusterdomain
      - name: sonatype-nexus
        chart: sonatype-nexus
        version: "3.4.0"
        resource:
          host: sonatype-nexus
          schema: http
        values:
          - name: "nexusProxy.env.nexusHttpHost"
            value: '{{ ( .GetResource "sonatype-nexus" ).Domain }}'
            check: clusterdomain
          - name: "initAdminPassword.password"
            value: "admin123"
            input:
              enabled: true
              password: true
              regex: ".{8,}"
              tip: "设置 NEXUS admin 账户密码(8位以上、必须包含大小写及数字):"
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
              include:
                - value: "[A-Z]+"
                  name: "必须包含大写"
                - value: "[a-z]+"
                  name: "必须包含小写"
                - value: "\\d+"
                  name: "必须包含数字"
      - name: chartmuseum
        chart: chartmuseum
        version: 3.9.3
        resource:
          host: chartmuseum
          port: 80
          schema: http
        values:
          - name: "ingress.hosts[0].name"
            value: '{{ ( .GetResource "chartmuseum" ).Domain }}'
            check: clusterdomain
          - name: "env.secret.BASIC_AUTH_USER"
            value: "choerodon"
            input:
              enabled: true
              regex: ".{3,}"
              tip: "请设置的chartmuseum的basic认证用户(3个字符以上,不能为纯数字):"
              password: false
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
          - name: "env.secret.BASIC_AUTH_PASS"
            value: "password"
            input:
              enabled: true
              password: true
              regex: ".{8,40}"
              tip: "请设置的chartmuseum的basic密码(8-40字符,不能为纯数字):"
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
      - name: sonarqube
        chart: sonarqube
        version: 1.0.6
        resource:
          schema: "http"
          host: '{{ .GetReleaseName "sonarqube" }}-postgresql'
          port: 5432
          username: "bn_sonarqube"
          password: "sonarqube_pw"
        values:
          - name: "ingress.hostname"
            value: '{{ ( .GetResource "sonarqube" ).Domain }}'
            check: clusterdomain
    c7n-framework:
      - name: choerodon-register
        chart: choerodon-register
        resource:
          host: "choerodon-register"
          port: 8000
          schema: http
          url: "http://choerodon-register:8000/eureka/"
        values:
      - name: choerodon-platform
        chart: choerodon-platform
        resource:
          host: choerodon-platform
          port: 8100
          schema: http
        requirements:
          - c7n-mysql
          - c7n-redis
          - choerodon-register
        preInstall:
          - name: choerodon-platform-predb
            commands:
              - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
              - CREATE DATABASE IF NOT EXISTS hzero_platform DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
              - GRANT ALL PRIVILEGES ON hzero_platform.* TO choerodon@"%";
              - FLUSH PRIVILEGES;
            infraRef: c7n-mysql
        afterInstall:
          - name: create-gitlab-client
            commands:
              - use hzero_platform
              # 子符串过长 yaml_v2 序列化时会自动换行
              - |
                INSERT IGNORE INTO hzero_platform.oauth_client (name,organization_id,resource_ids,secret,scope,authorized_grant_types,
                web_server_redirect_uri,access_token_validity,refresh_token_validity,additional_information,auto_approve,
                object_version_number,created_by,creation_date,last_updated_by,last_update_date)VALUES("gitlab",1,"default",
                "secret","default","password,implicit,client_credentials,authorization_code,refresh_token",
                "{{ ( .GetResource "gitlab" ).Schema }}://{{ ( .GetResource "gitlab" ).Domain }}",3600,3600,"{}","default",1,0,NOW(),0,NOW());
            infraRef: c7n-mysql
        values:
      - name: choerodon-admin
        chart: choerodon-admin
        resource:
          host: choerodon-admin
          port: 8062
          schema: http
        requirements:
          - choerodon-platform
        preInstall:
          - name: choerodon-admin-predb
            commands:
              - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
              - CREATE DATABASE IF NOT EXISTS hzero_admin DEFAULT CHARACTER SET utf8;
              - GRANT ALL PRIVILEGES ON hzero_admin.* TO choerodon@"%";
              - FLUSH PRIVILEGES;
            infraRef: c7n-mysql
        values:
      - name: choerodon-asgard
        chart: choerodon-asgard
        resource:
          host: choerodon-asgard
          port: 8040
          schema: http
        requirements:
          - choerodon-admin
        preInstall:
          - name: hzero-asgard-predb
            commands:
              - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
              - CREATE DATABASE IF NOT EXISTS asgard_service DEFAULT CHARACTER SET utf8;
              - GRANT ALL PRIVILEGES ON asgard_service.* TO choerodon@"%";
              - FLUSH PRIVILEGES;
            infraRef: c7n-mysql
        values:
      - name: choerodon-gateway
        chart: choerodon-gateway
        resource:
          host: choerodon-gateway
          port: 8080
          schema: http
        requirements:
          - choerodon-admin
        values:
          - name: "ingress.hostname"
            value: '{{ (.GetResource "choerodon-gateway" ).Domain }}'
            check: clusterdomain
      - name: choerodon-oauth
        chart: choerodon-oauth
        resource:
          host: choerodon-oauth
          port: 8020
          schema: http
        requirements:
          - choerodon-gateway
          - choerodon-iam
        values:
      - name: choerodon-iam
        chart: choerodon-iam
        resource:
          host: choerodon-iam
          port: 8030
          schema: http
        requirements:
          - choerodon-admin
        values:
      - name: choerodon-file
        chart: choerodon-file
        resource:
          host: choerodon-file
          port: 8110
          schema: http
        requirements:
          - choerodon-asgard
          - minio
        preInstall:
          - name: choerodon-file-predb
            commands:
              - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
              - CREATE DATABASE IF NOT EXISTS hzero_file DEFAULT CHARACTER SET utf8;
              - GRANT ALL PRIVILEGES ON hzero_file.* TO choerodon@"%";
              - FLUSH PRIVILEGES;
            infraRef: c7n-mysql
        values:
      - name: choerodon-swagger
        chart: choerodon-swagger
        resource:
          host: choerodon-swagger
          port:
          schema: http
        requirements:
          - choerodon-asgard
        values:
      - name: choerodon-message
        chart: choerodon-message
        resource:
          host: choerodon-message
          port: 8120
          schema: http
        requirements:
          - choerodon-asgard
          - choerodon-iam
        preInstall:
          - name: choerodon-message-predb
            commands:
              - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
              - CREATE DATABASE IF NOT EXISTS hzero_message DEFAULT CHARACTER SET utf8;
              - GRANT ALL PRIVILEGES ON hzero_message.* TO choerodon@"%";
              - FLUSH PRIVILEGES;
            infraRef: c7n-mysql
        values:
          - name: "ingress.hostname"
            value: '{{ (.GetResource "choerodon-message" ).Domain }}'
            check: clusterdomain
      - name: choerodon-monitor
        chart: choerodon-monitor
        resource:
          host: choerodon-monitor
          port: 8260
          schema: http
        requirements:
          - choerodon-asgard
        preInstall:
          - name: choerodon-monitor-predb
            commands:
              - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
              - CREATE DATABASE IF NOT EXISTS hzero_monitor DEFAULT CHARACTER SET utf8;
              - GRANT ALL PRIVILEGES ON hzero_monitor.* TO choerodon@"%";
              - FLUSH PRIVILEGES;
            infraRef: c7n-mysql
        values:
      - name: choerodon-front-hzero
        version: 2.0.0
        chart: choerodon-front-hzero
        resource:
          host: choerodon-front-hzero
          schema: http
        requirements:
          - choerodon-monitor
          - choerodon-file
          - choerodon-swagger
          - choerodon-message
        values:
          - name: "ingress.hostname"
            value: '{{ ( .GetResource "choerodon-front-hzero" ).Domain }}'
        preInstall:
          - name: create-choerodon-front-hzero-client
            commands:
              - USE hzero_platform;
              - |
                INSERT IGNORE INTO hzero_platform.oauth_client (
                  name,organization_id,resource_ids,secret,scope,
                  authorized_grant_types,web_server_redirect_uri,
                  access_token_validity,refresh_token_validity,
                  additional_information,auto_approve,object_version_number,
                  created_by,creation_date,last_updated_by,last_update_date)
                VALUES("hzero",1,"default","secret","default",
                      "password,implicit,client_credentials,authorization_code,refresh_token",
                      '{{ ( .GetResource "choerodon-front-hzero").Schema }}://{{ ( .GetResource "choerodon-front-hzero").Domain }}',3600,3600,"{}","default",1,0,NOW(),0,NOW());
            infraRef: c7n-mysql
    c7n-devops:
      - name: devops-service
        chart: devops-service-business
        resource:
          host: devops-service
          port: 8061
          schema: ws
        requirements:
          - choerodon-front-hzero
          - gitlab
          - harbor
          - sonarqube
          - chartmuseum
        preInstall:
          - name: devops-service-predb
            commands:
              - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
              - CREATE DATABASE IF NOT EXISTS devops_service DEFAULT CHARACTER SET utf8;
              - GRANT ALL PRIVILEGES ON devops_service.* TO choerodon@"%";
              - FLUSH PRIVILEGES;
            infraRef: c7n-mysql
          - name: create-sonarqube-front-client
            commands:
              - USE hzero_platform;
              - |
                INSERT IGNORE INTO hzero_platform.oauth_client (
                  name,organization_id,resource_ids,secret,scope,
                  authorized_grant_types,web_server_redirect_uri,
                  access_token_validity,refresh_token_validity,
                  additional_information,auto_approve,object_version_number,
                  created_by,creation_date,last_updated_by,last_update_date)
                VALUES("sonar",1,"default","secret","default",
                      "password,implicit,client_credentials,authorization_code,refresh_token",
                      '{{ ( .GetResource "sonarqube").Schema }}://{{ ( .GetResource "sonarqube").Domain }}/oauth2/callback/choerodon',3600,3600,"{}","default",1,0,NOW(),0,NOW());
            infraRef: c7n-mysql
          #- name: sonarqube-init-predb
          #  psql:
          #    - UPDATE organizations SET new_project_private = true WHERE kee='default-organization';
          #    - INSERT INTO properties (prop_key, text_value, is_empty, created_at) VALUES ('sonar.url', 'http://{{ ( .GetResource "sonarqube" ).Domain }}/', false, EXTRACT(epoch FROM NOW()) * 1000);
          #    - INSERT INTO properties (prop_key, text_value, is_empty, created_at) VALUES ('sonar.auth.choerodon.url', 'http://{{ ( .GetResource "choerodon-gateway" ).Domain }}', false, EXTRACT(epoch FROM NOW()) * 1000);
          #    - INSERT INTO properties (prop_key, text_value, is_empty, created_at) VALUES ('sonar.auth.choerodon.applicationId', 'sonar', false, EXTRACT(epoch FROM NOW()) * 1000);
          #    - INSERT INTO properties (prop_key, text_value, is_empty, created_at) VALUES ('sonar.auth.choerodon.secret', 'secret', false, EXTRACT(epoch FROM NOW()) * 1000);
          #    - INSERT INTO properties (prop_key, text_value, is_empty, created_at) VALUES ('sonar.auth.choerodon.enabled', 'true', false, EXTRACT(epoch FROM NOW()) * 1000);
          #  infraRef: sonarqube
          #  database: bitnami_sonarqube
        values:
          - name: "ingress.hostname"
            value: '{{ ( .GetResource "devops-service" ).Domain }}'
            check: clusterdomain
      - name: gitlab-service
        chart: gitlab-service
        resource:
          host: gitlab-service
          port: 8071
          schema: http
        requirements:
          - choerodon-front-hzero
          - gitlab
        preInstall:
          - name: gitlab-set-access-token
            psql:
              - |
                insert into personal_access_tokens (user_id, token_digest, name, expires_at, created_at, updated_at, scopes)
                values (1, '{{ .EncryptGitlabAccessToken }}', 'c7n', '2099-12-31', '2020-04-28 00:00:00', '2019-04-28 00:00:00',
                array_to_string(ARRAY ['---','- api','- read_user','- sudo','- read_repository'], chr(10))) ON CONFLICT (token_digest)
                DO UPDATE SET updated_at=NOW();
            infraRef: gitlab
            database: gitlabhq_production
        afterInstall:
          - name: create-gitlabadmin-binding
            psql:
              - CREATE EXTENSION IF NOT EXISTS pg_trgm;
              - INSERT INTO identities(extern_uid, provider, user_id, created_at, updated_at) VALUES ('1', 'oauth2_generic', 1, NOW(), NOW());
            infraRef: gitlab
            database: gitlabhq_production
          - name: enable_webhook
            request:
              header:
                - name: "content-type"
                  value: "application/json"
                # TODO get GITLAB_OAUTH_TOKEN
                - name: "private-token"
                  value: '{{.GetReleaseValue "gitlab-service" "extraEnv.GITLAB_PRIVATETOKEN"}}'
              url: '{{(.GetResource "gitlab").Schema }}://{{(.GetResource "gitlab").Domain}}/api/v4/application/settings'
              body: |
                {
                        "allow_local_requests_from_hooks_and_services": true
                }
              method: PUT
        values:
          - name: "extraEnv.GITLAB_PRIVATETOKEN"
            value: "{{ generateAlphaNum 20 }}"
      - name: workflow-service
        chart: workflow-service
        resource:
          host: workflow-service
          port: 8066
          schema: ws
        requirements:
          - choerodon-front-hzero
        preInstall:
          - name: workflow-service-predb
            commands:
              - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
              - CREATE DATABASE IF NOT EXISTS workflow_service DEFAULT CHARACTER SET utf8;
              - GRANT ALL PRIVILEGES ON workflow_service.* TO choerodon@"%";
              - FLUSH PRIVILEGES;
            infraRef: c7n-mysql
        values:
      - name: code-repo-service
        chart: code-repo-service
        resource:
          host: code-repo-service
          schema: http
        requirements:
          - gitlab-service
        values:
        preInstall:
          - name: code-repo-service-predb
            commands:
              - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
              - CREATE DATABASE IF NOT EXISTS hrds_code_repo DEFAULT CHARACTER SET utf8;
              - GRANT ALL PRIVILEGES ON hrds_code_repo.* TO choerodon@"%";
              - FLUSH PRIVILEGES;
            infraRef: c7n-mysql
      - name: prod-repo-service
        chart: prod-repo-service
        resource:
          host: prod-repo-service
          schema: http
        requirements:
          - devops-service
          - sonatype-nexus
        values:
        preInstall:
          - name: prod-repo-service-predb
            commands:
              - CREATE USER IF NOT EXISTS "choerodon"@"%" IDENTIFIED BY "password";
              - CREATE DATABASE IF NOT EXISTS hrds_prod_repo DEFAULT CHARACTER SET utf8;
              - GRANT ALL PRIVILEGES ON hrds_prod_repo.* TO choerodon@"%";
              - FLUSH PRIVILEGES;
            infraRef: c7n-mysql
    c7n-front:
      - name: choerodon-front
        chart: choerodon-front
        resource:
          host: "choerodon-front"
          port: 80
          schema: http
        requirements:
          - choerodon-front-hzero
        preInstall:
          - name: create-choerodon-front-client
            commands:
              - USE hzero_platform;
              - |
                INSERT IGNORE INTO hzero_platform.oauth_client (
                  name,organization_id,resource_ids,secret,scope,
                  authorized_grant_types,web_server_redirect_uri,
                  access_token_validity,refresh_token_validity,
                  additional_information,auto_approve,object_version_number,
                  created_by,creation_date,last_updated_by,last_update_date)
                VALUES("choerodon",1,"default","secret","default",
                      "password,implicit,client_credentials,authorization_code,refresh_token",
                      '{{ ( .GetResource "choerodon-front").Schema }}://{{ ( .GetResource "choerodon-front").Domain }}',3600,3600,"{}","default",1,0,NOW(),0,NOW());
            infraRef: c7n-mysql
        values:
          - name: "ingress.hostname"
            value: '{{ ( .GetResource "choerodon-front").Domain }}'
            check: clusterdomain
    runner:
      - name: gitlab-runner
        chart: gitlab-runner
        version: "0.2.4"
        resource:
          host:
        requirements:
          - gitlab
        values:
          - name: "rbac.create"
            value: "true"
          - name: "env.concurrent"
            value: "3"
          - name: "env.gitlabUrl"
            value: '{{ ( .GetResource "gitlab" ).Schema }}://{{ ( .GetResource "gitlab" ).Domain }}/'
          - name: "env.runnerToken"
            value: "{{ ( generateAlphaNum 30) }}"
          - name: "env.environment.CHOERODON_URL"
            value: '{{ ( .GetResource "choerodon-gateway").Schema }}://{{ ( .GetResource "choerodon-gateway").Domain }}'
          - name: 'env.persistence.{{ (.GetRunnerPersistence 0 ).RefPvcName }}'
            value: "/root/.m2"
          - name: 'env.persistence.{{ (.GetRunnerPersistence 1 ).RefPvcName }}'
            value: "/cache"
          - name: "enabled_mount_host_docker_sock"
            value: "true"
        persistence:
          - name: gitlab-runner-maven
            path: gitlab-runner/maven
            mode: "755"
            accessModes:
              - ReadWriteMany
            size: 20Gi
            pvcEnabled: true
            mountOptions:
              - hard
              - intr
              - nfsvers=4.0
          - name: gitlab-runner-cache
            path: gitlab-runner/cache
            mode: "755"
            accessModes:
              - ReadWriteMany
            size: 20Gi
            pvcEnabled: true
            mountOptions:
              - hard
              - intr
              - nfsvers=4.0
        preInstall:
          - name: insertrunnertoken
            psql:
              - |
                INSERT INTO
                  ci_runners
                  ( token, created_at, updated_at, description, is_shared, name, runner_type )
                VALUES
                  ( '{{ .GetRunnerValues "env.runnerToken" }}', NOW(), NOW(), 'c7n-default', true,'gitlab-runner', 1 )
            infraRef: gitlab
            database: gitlabhq_production
    component:
      - name: mysql-app
        chart: mysql
        version: 0.1.4
        values:
          - name: "env.MYSQL_ROOT_PASSWORD"
            value: "admin"
            input:
              enabled: true
              regex: ".+"
              password: true
              tip: "请输入您要设置的mysql密码(不能为纯数字):"
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
          - name: "persistence.storageClass"
            value: "nfs-provisioner"
            input:
              enabled: true
              regex: ".+"
              password: false
              tip: "请输入mysql使用的storageClass:"
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
          - name: "persistence.enabled"
            value: "true"
          - name: "persistence.size"
            value: "20Gi"
          - name: "config.character_set_server"
            value: "utf8mb4"
          - name: "config.collation_server"
            value: "utf8mb4_general_ci"
          - name: "config.lower_case_table_names"
            value: "1"
          - name: "config.max_allowed_packet"
            value: "32M"
          - name: "config.max_connections"
            value: "1500"
      - name: redis-app
        chart: redis
        version: 0.2.5
        resource:
          # svc name = release name
          host: '{{ .GetReleaseNameGetReleaseName "redis" }}'
          port: 6379
        values:
          - name: "service.enabled"
            value: "true"
      - name: minio-app
        chart: minio
        version: 5.0.9
        resource:
          host: minio
          port: 9000
          schema: http
        requirements:
        values:
          - name: "ingress.hosts[0]"
            value: "minio.example.choerodon.io"
            input:
              enabled: true
              regex: ".+"
              tip: "请输入 minio 的域名: "
              password: false
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
          - name: "accessKey"
            value: "admin"
            input:
              enabled: true
              regex: ".{3,}"
              tip: "请设置的minio的ACCESS_KEY(3个字符以上,不能为纯数字): "
              password: false
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
          - name: "secretKey"
            value: "choerodon"
            input:
              enabled: true
              password: true
              regex: ".{8,40}"
              tip: "请设置的minio的SECRET_KEY(8-40字符,不能为纯数字): "
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
          - name: "mode"
            value: "distributed"
          - name: "persistence.enabled"
            value: "true"
          - name: "persistence.storageClass"
            value: "nfs-provisioner"
            input:
              enabled: true
              regex: ".+"
              password: false
              tip: "请输入mysql使用的storageClass: "
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
          - name: "persistence.size"
            value: "50Gi"
          - name: "ingress.enabled"
            value: "true"
      - name: nfs-client-provisioner
        chart: nfs-client-provisioner
        version: 0.1.1
        values:
          - name: "rbac.create"
            value: "true"
          - name: "persistence.enabled"
            value: "true"
          - name: "storageClass.name"
            value: nfs-provisioner
            input:
              enabled: true
              regex: ".+"
              password: false
              tip: "请输入 storageClass 的名字: "
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
          - name: "persistence.enabled"
            value: nfs-provisioner
            input:
              enabled: true
              regex: ".+"
              password: false
              tip: "请输入 NFS 服务器的IP: "
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
          - name: "persistence.nfsServer"
            value: nfs-provisioner
            input:
              enabled: true
              regex: ".+"
              password: false
              tip: "请输入 NFS 服务器的IP: "
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
          - name: "persistence.nfsPath"
            value: nfs-provisioner
            input:
              enabled: true
              regex: ".+"
              password: false
              tip: "请输入 NFS 的目录: "
              exclude:
                - value: "^\\d*$"
                  name: "不能为纯数字"
    monitoring:
      - name: prometheus-operator
        chart: prometheus-operator
        version: 9.3.0
        resource:
          host: "prometheus-operator"
          port: 8080
        requirements: [ ]
        preInstall: [ ]
        values: [ ]
    logging:
      - name: loki
        chart: loki
        version: 0.29.0
        resource:
          host: "loki"
          port: 8080
        requirements: [ ]
        preInstall: [ ]
        values: [ ]
      - name: promtail
        chart: promtail
        version: 0.23.0
        resource:
          host: "loki"
          port: 8080
        requirements: [ ]
        preInstall: [ ]
        values: [ ]
    skymalking:
      - name: skywalking-mysql
        chart: mysql
        version: 0.1.4
        resource:
          host: "loki"
          port: 8080
        requirements: [ ]
        preInstall: [ ]
        values: [ ]
      - name: skywalking
        chart: skywalking
        version: 6.6.0
        resource:
          host: "loki"
          port: 8080
        requirements: [ ]
        preInstall: [ ]
        values: [ ]
